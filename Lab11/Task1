#include <iostream>
#include <exception>
using namespace std;
 
 class DimensionMismatchException : public exception {
     char message[100];
 public:
     DimensionMismatchException(int r1, int c1, int r2, int c2) {
         sprintf(message, "DimensionMismatchException: Matrices must have same dimensions (%dx%d vs %dx%d)", r1, c1, r2, c2);
     }
     const char* what() const noexcept override {
         return message;
     }
 };
 
 template <typename T>
 class Matrix {
 private:
     T** data;
     int rows, cols;
 public:
     Matrix(int r, int c) : rows(r), cols(c) {
         data=new T*[rows];
         for (int i=0 ; i<rows ; i++)
             data[i]=new T[cols];
     }
 
     void set(int r, int c, T value) {
         data[r][c]=value;
     }
 
     T get(int r, int c) const {
         return data[r][c];
     }
 
     Matrix<T> add(const Matrix<T>& other) const {
         if (rows != other.rows || cols != other.cols)
             throw DimensionMismatchException(rows, cols, other.rows, other.cols);
         Matrix<T> result(rows, cols);
         for (int i=0 ; i<rows ; ++i)
             for (int j=0 ; j<cols ; ++j)
                 result.set(i, j, data[i][j] + other.get(i, j));
         return result;
     }
 
     void print() const {
         for (int i=0 ; i<rows ; ++i) {
             for (int j=0 ; j<cols ; ++j)
                 cout<<data[i][j]<<" ";
             cout<<endl;
         }
     }
 
     ~Matrix() {
         for (int i=0 ; i<rows ; i++)
             delete[] data[i];
         delete[] data;
     }
 };
 
 int main() {
     try {
         Matrix<int> A(2, 2), B(3, 3);
         A.set(0, 0, 1); A.set(0, 1, 2);
         A.set(1, 0, 3); A.set(1, 1, 4);
 
         Matrix<int> C=A.add(B); 
         C.print();
     } catch (const exception& e) {
         cout<<e.what()<<endl;
     }
 
     return 0;
 }
