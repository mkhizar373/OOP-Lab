#include <iostream>
#include <exception>
using namespace std;

class DatabaseException : public exception {
public:
    const char* what() const noexcept override {
        return "A database error occurred.";
    }
};

class ConnectionFailedException : public DatabaseException {
public:
    const char* what() const noexcept override {
        return DatabaseException::what();
    }
};

class QueryTimeoutException : public DatabaseException {
public:
    const char* what() const noexcept override {
        return DatabaseException::what();
    }
};

template <typename T>
class DatabaseConnector {
public:
    void connectToDatabase(const T& dbName) {
        cout<<"Attempting to connect to "<<dbName<<endl;

        if (dbName == "invalid_db") {
            throw ConnectionFailedException();
        }
        else if (dbName == "slow_db") {
            throw QueryTimeoutException();
        }

        cout<<"Connected to "<<dbName<<"successfully."<<endl;
    }
};

int main() {
    DatabaseConnector<string> dbConnector;

    try {
        dbConnector.connectToDatabase("invalid_db");
    } catch (const ConnectionFailedException& e) {
        cout<<"Caught ConnectionFailedException what(): "<<e.what()<<endl;
    } catch (const DatabaseException& e) {
        cout<<"Caught a general DatabaseException what(): "<<e.what()<<endl;
    }

    try {
        dbConnector.connectToDatabase("slow_db");
    } catch (const QueryTimeoutException& e) {
        cout<<"Caught QueryTimeoutException what(): "<<e.what()<<endl;
    } catch (const DatabaseException& e) {
        cout<<"Caught a general DatabaseException what(): "<<e.what()<<endl;
    }

    return 0;
}
