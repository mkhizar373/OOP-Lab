#include <iostream>
#include <string>
using namespace std;

class Device {
protected:
    int deviceID;
    string deviceName;
    bool status;
    string location;

public:
    Device(int id, string name, string loc="Unknown") : deviceID(id), deviceName(name), location(loc), status(false) {}
    
    virtual void turnOn() { 
        status=true; 
    }
    
    virtual void turnOff() { 
        status=false;
    }
    
    virtual void getStatus() {
        cout<<"Device Status: "<<(status ? "On" : "Off")<<"\n";
    }
    
    virtual void displayInfo() {
        cout << "Device ID: " << deviceID << "\nName: "<<deviceName<<"\nStatus: "<<(status ? "On" : "Off")<<"\nLocation: " <<location<<"\n";
    }
};

class Light : public Device {
private:
    int brightnessLevel;
    string colorMode;

public:
    Light(int id, string name, int brightness, string color, string loc="Unknown") : Device(id, name, loc), brightnessLevel(brightness), colorMode(color) {}
    
    void displayInfo() override {
        Device::displayInfo();
        cout<<"Brightness Level: "<<brightnessLevel<<"\nColor Mode: "<<colorMode<<"\n";
    }
};

class Thermostat : public Device {
private:
    int temperature;
    string mode;
    int targetTemperature;

public:
    Thermostat(int id, string name, int temp, string m, int targetTemp, string loc="Unknown") : Device(id, name, loc), temperature(temp), mode(m), targetTemperature(targetTemp) {}
    
    void getStatus() override {
        cout<<"Thermostat Status: "<<(status ? "On" : "Off")<<"\nCurrent Temperature: "<<temperature<<"°C"<<"\nTarget Temperature: "<<targetTemperature<<"°C\n";
    }
};

class SecurityCamera : public Device {
private:
    string resolution;
    bool recordingStatus;
    bool nightVisionEnabled;

public:
    SecurityCamera(int id, string name, string res, bool nightVision, string loc="Unknown") : Device(id, name, loc), resolution(res), nightVisionEnabled(nightVision), recordingStatus(false) {}
    
    void turnOn() override {
        status=true;
        recordingStatus=true;
        cout<<"Security Camera turned on. Recording started automatically.\n";
    }
};

class SmartPlug : public Device {
private:
    int powerConsumption;
    int timerSetting;

public:
    SmartPlug(int id, string name, int power, int timer, string loc="Unknown") : Device(id, name, loc), powerConsumption(power), timerSetting(timer) {}
    
    void turnOff() override {
        cout<<"SmartPlug turned off. Power usage logged: "<<powerConsumption<<"W\n";
        status=false;
    }
};

int main() {
    Light light1(1,"BedRoom Light",75,"Warm White","BedRoom");
    Thermostat thermostat1(2,"Home Thermostat",22,"Heating",24,"Hallway");
    SecurityCamera cam1(3,"Front Door Cam","1080p",true,"Entrance");
    SmartPlug plug1(4,"Kitchen Plug",500,30,"Kitchen");
    
    cout << "Device Info :\n";
    light1.displayInfo();
    thermostat1.getStatus();
    cam1.turnOn();
    plug1.turnOff();
    
    return 0;
}
